/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.rest.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.atlassian.jira.rest.client.model.CustomFieldReplacement;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * DeleteAndReplaceVersionBean
 */
@JsonPropertyOrder({
  DeleteAndReplaceVersionBean.JSON_PROPERTY_MOVE_FIX_ISSUES_TO,
  DeleteAndReplaceVersionBean.JSON_PROPERTY_MOVE_AFFECTED_ISSUES_TO,
  DeleteAndReplaceVersionBean.JSON_PROPERTY_CUSTOM_FIELD_REPLACEMENT_LIST
})
@JsonTypeName("DeleteAndReplaceVersionBean")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-12-31T17:44:39.790417-08:00[America/Los_Angeles]")
public class DeleteAndReplaceVersionBean {
  public static final String JSON_PROPERTY_MOVE_FIX_ISSUES_TO = "moveFixIssuesTo";
  private Long moveFixIssuesTo;

  public static final String JSON_PROPERTY_MOVE_AFFECTED_ISSUES_TO = "moveAffectedIssuesTo";
  private Long moveAffectedIssuesTo;

  public static final String JSON_PROPERTY_CUSTOM_FIELD_REPLACEMENT_LIST = "customFieldReplacementList";
  private List<CustomFieldReplacement> customFieldReplacementList = null;


  public DeleteAndReplaceVersionBean moveFixIssuesTo(Long moveFixIssuesTo) {
    
    this.moveFixIssuesTo = moveFixIssuesTo;
    return this;
  }

   /**
   * The ID of the version to update &#x60;fixVersion&#x60; to when the field contains the deleted version.
   * @return moveFixIssuesTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the version to update `fixVersion` to when the field contains the deleted version.")
  @JsonProperty(JSON_PROPERTY_MOVE_FIX_ISSUES_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getMoveFixIssuesTo() {
    return moveFixIssuesTo;
  }


  public void setMoveFixIssuesTo(Long moveFixIssuesTo) {
    this.moveFixIssuesTo = moveFixIssuesTo;
  }


  public DeleteAndReplaceVersionBean moveAffectedIssuesTo(Long moveAffectedIssuesTo) {
    
    this.moveAffectedIssuesTo = moveAffectedIssuesTo;
    return this;
  }

   /**
   * The ID of the version to update &#x60;affectedVersion&#x60; to when the field contains the deleted version.
   * @return moveAffectedIssuesTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the version to update `affectedVersion` to when the field contains the deleted version.")
  @JsonProperty(JSON_PROPERTY_MOVE_AFFECTED_ISSUES_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getMoveAffectedIssuesTo() {
    return moveAffectedIssuesTo;
  }


  public void setMoveAffectedIssuesTo(Long moveAffectedIssuesTo) {
    this.moveAffectedIssuesTo = moveAffectedIssuesTo;
  }


  public DeleteAndReplaceVersionBean customFieldReplacementList(List<CustomFieldReplacement> customFieldReplacementList) {
    
    this.customFieldReplacementList = customFieldReplacementList;
    return this;
  }

  public DeleteAndReplaceVersionBean addCustomFieldReplacementListItem(CustomFieldReplacement customFieldReplacementListItem) {
    if (this.customFieldReplacementList == null) {
      this.customFieldReplacementList = new ArrayList<>();
    }
    this.customFieldReplacementList.add(customFieldReplacementListItem);
    return this;
  }

   /**
   * An array of custom field IDs (&#x60;customFieldId&#x60;) and version IDs (&#x60;moveTo&#x60;) to update when the fields contain the deleted version.
   * @return customFieldReplacementList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of custom field IDs (`customFieldId`) and version IDs (`moveTo`) to update when the fields contain the deleted version.")
  @JsonProperty(JSON_PROPERTY_CUSTOM_FIELD_REPLACEMENT_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CustomFieldReplacement> getCustomFieldReplacementList() {
    return customFieldReplacementList;
  }


  public void setCustomFieldReplacementList(List<CustomFieldReplacement> customFieldReplacementList) {
    this.customFieldReplacementList = customFieldReplacementList;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeleteAndReplaceVersionBean deleteAndReplaceVersionBean = (DeleteAndReplaceVersionBean) o;
    return Objects.equals(this.moveFixIssuesTo, deleteAndReplaceVersionBean.moveFixIssuesTo) &&
        Objects.equals(this.moveAffectedIssuesTo, deleteAndReplaceVersionBean.moveAffectedIssuesTo) &&
        Objects.equals(this.customFieldReplacementList, deleteAndReplaceVersionBean.customFieldReplacementList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(moveFixIssuesTo, moveAffectedIssuesTo, customFieldReplacementList);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeleteAndReplaceVersionBean {\n");
    sb.append("    moveFixIssuesTo: ").append(toIndentedString(moveFixIssuesTo)).append("\n");
    sb.append("    moveAffectedIssuesTo: ").append(toIndentedString(moveAffectedIssuesTo)).append("\n");
    sb.append("    customFieldReplacementList: ").append(toIndentedString(customFieldReplacementList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

