/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.rest.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.atlassian.jira.rest.client.model.Scope;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Details about an issue type.
 */
@ApiModel(description = "Details about an issue type.")
@JsonPropertyOrder({
  IssueTypeDetails.JSON_PROPERTY_SELF,
  IssueTypeDetails.JSON_PROPERTY_ID,
  IssueTypeDetails.JSON_PROPERTY_DESCRIPTION,
  IssueTypeDetails.JSON_PROPERTY_ICON_URL,
  IssueTypeDetails.JSON_PROPERTY_NAME,
  IssueTypeDetails.JSON_PROPERTY_SUBTASK,
  IssueTypeDetails.JSON_PROPERTY_AVATAR_ID,
  IssueTypeDetails.JSON_PROPERTY_ENTITY_ID,
  IssueTypeDetails.JSON_PROPERTY_SCOPE
})
@JsonTypeName("IssueTypeDetails")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-12-31T17:44:39.790417-08:00[America/Los_Angeles]")
public class IssueTypeDetails {
  public static final String JSON_PROPERTY_SELF = "self";
  private String self;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_ICON_URL = "iconUrl";
  private String iconUrl;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_SUBTASK = "subtask";
  private Boolean subtask;

  public static final String JSON_PROPERTY_AVATAR_ID = "avatarId";
  private Long avatarId;

  public static final String JSON_PROPERTY_ENTITY_ID = "entityId";
  private UUID entityId;

  public static final String JSON_PROPERTY_SCOPE = "scope";
  private Scope scope = null;


   /**
   * The URL of these issue type details.
   * @return self
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL of these issue type details.")
  @JsonProperty(JSON_PROPERTY_SELF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSelf() {
    return self;
  }




   /**
   * The ID of the issue type.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the issue type.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }




   /**
   * The description of the issue type.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The description of the issue type.")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }




   /**
   * The URL of the issue type&#39;s avatar.
   * @return iconUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL of the issue type's avatar.")
  @JsonProperty(JSON_PROPERTY_ICON_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIconUrl() {
    return iconUrl;
  }




   /**
   * The name of the issue type.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the issue type.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }




   /**
   * Whether this issue type is used to create subtasks.
   * @return subtask
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether this issue type is used to create subtasks.")
  @JsonProperty(JSON_PROPERTY_SUBTASK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSubtask() {
    return subtask;
  }




   /**
   * The ID of the issue type&#39;s avatar.
   * @return avatarId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the issue type's avatar.")
  @JsonProperty(JSON_PROPERTY_AVATAR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getAvatarId() {
    return avatarId;
  }




   /**
   * Unique ID for next-gen projects.
   * @return entityId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique ID for next-gen projects.")
  @JsonProperty(JSON_PROPERTY_ENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getEntityId() {
    return entityId;
  }




   /**
   * Details of the next-gen projects the issue type is available in.
   * @return scope
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Details of the next-gen projects the issue type is available in.")
  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Scope getScope() {
    return scope;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueTypeDetails issueTypeDetails = (IssueTypeDetails) o;
    return Objects.equals(this.self, issueTypeDetails.self) &&
        Objects.equals(this.id, issueTypeDetails.id) &&
        Objects.equals(this.description, issueTypeDetails.description) &&
        Objects.equals(this.iconUrl, issueTypeDetails.iconUrl) &&
        Objects.equals(this.name, issueTypeDetails.name) &&
        Objects.equals(this.subtask, issueTypeDetails.subtask) &&
        Objects.equals(this.avatarId, issueTypeDetails.avatarId) &&
        Objects.equals(this.entityId, issueTypeDetails.entityId) &&
        Objects.equals(this.scope, issueTypeDetails.scope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(self, id, description, iconUrl, name, subtask, avatarId, entityId, scope);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueTypeDetails {\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    iconUrl: ").append(toIndentedString(iconUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    subtask: ").append(toIndentedString(subtask)).append("\n");
    sb.append("    avatarId: ").append(toIndentedString(avatarId)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

